package bnet.protocol.channel;
import "bnet/channel_types.proto";
import "bnet/entity.proto";


message GetChannelIdRequest {
}

message GetChannelIdResponse {
	optional EntityId channel_id = 1;
}

message CreateChannelRequest {
	optional Identity agent_identity = 1;
	optional MemberState member_state = 2;
	optional ChannelState channel_state = 3;
	optional EntityId channel_id = 4;
	optional uint64 object_id = 5;
	optional EntityId local_agent = 6;
	optional MemberState local_member_state = 7;
}

message CreateChannelResponse {
	required uint64 object_id = 1;
	optional EntityId channel_id = 2;
}

message JoinChannelRequest {
	optional Identity agent_identity = 1;
	optional MemberState member_state = 2;
	required EntityId channel_id = 3;
	required uint64 object_id = 4;
	repeated EntityId friend_account_id = 5;
	optional bool local_subscriber = 6 [default = true];
}

message JoinChannelResponse {
	optional uint64 object_id = 1;
	optional bool require_friend_validation = 2 [default = false];
	repeated EntityId privileged_account = 3;
}

message SubscribeChannelRequest {
	optional EntityId agent_id = 1;
	required EntityId channel_id = 2;
	required uint64 object_id = 3;
}

message SubscribeChannelResponse {
	optional uint64 object_id = 1;
}

message FindChannelRequest {
	optional Identity agent_identity = 1;
	required FindChannelOptions options = 2;
}

message FindChannelResponse {
	repeated ChannelDescription channel = 1;
}

message GetChannelInfoRequest {
	optional EntityId agent_id = 1;
	required EntityId channel_id = 2;
	optional bool fetch_state = 3 [default = false];
	optional bool fetch_members = 4 [default = false];
}

message GetChannelInfoResponse {
	optional ChannelInfo channel_info = 1;
}
