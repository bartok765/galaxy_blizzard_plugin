package bnet.protocol.authentication;
import "bnet/account_types.proto";
import "bnet/content_handle.proto";
import "bnet/entity.proto";


message ModuleLoadRequest {
	required ContentHandle module_handle = 1;
	optional bytes message = 2;
}

message ModuleNotification {
	optional int32 module_id = 2;
	optional uint32 result = 3;
}

message ModuleMessageRequest {
	required int32 module_id = 1;
	optional bytes message = 2;
}

message LogonRequest {
	optional string program = 1;
	optional string platform = 2;
	optional string locale = 3;
	optional string email = 4;
	optional string version = 5;
	optional int32 application_version = 6;
	optional bool public_computer = 7;
	optional bytes sso_id = 8;
	optional bool disconnect_on_cookie_fail = 9 [default = false];
	optional bool allow_logon_queue_notifications = 10 [default = false];
	optional bool web_client_verification = 11 [default = false];
	optional bytes cached_web_credentials = 12;
	optional string user_agent = 14;
}

message LogonResult {
	required uint32 error_code = 1;
	optional EntityId account = 2;
	repeated EntityId game_account = 3;
	optional string email = 4;
	repeated uint32 available_region = 5;
	optional uint32 connected_region = 6;
	optional string battle_tag = 7;
	optional string geoip_country = 8;
}

message GenerateSSOTokenRequest {
	optional fixed32 program = 1;
}

message GenerateSSOTokenResponse {
	optional bytes sso_id = 1;
	optional bytes sso_secret = 2;
}

message LogonUpdateRequest {
	required uint32 error_code = 1;
}

message LogonQueueUpdateRequest {
	required uint32 position = 1;
	required uint64 estimated_time = 2;
	required uint64 eta_deviation_in_sec = 3;
}

message AccountSettingsNotification {
	repeated account.AccountLicense licenses = 1;
	optional bool is_using_rid = 2;
	optional bool is_playing_from_igr = 3;
	optional bool can_receive_voice = 4;
	optional bool can_send_voice = 5;
}

message ServerStateChangeRequest {
	required uint32 state = 1;
	required uint64 event_time = 2;
}

message VersionInfo {
	optional uint32 number = 1;
	optional string patch = 2;
	optional bool is_optional = 3;
	optional uint64 kick_time = 4;
}

message VersionInfoNotification {
	optional VersionInfo version_info = 1;
}

message MemModuleLoadRequest {
	required ContentHandle handle = 1;
	required bytes key = 2;
	required bytes input = 3;
}

message MemModuleLoadResponse {
	required bytes data = 1;
}

message SelectGameAccountRequest {
	required EntityId game_account = 1;
}

message GameAccountSelectedRequest {
	required uint32 result = 1;
	optional EntityId game_account = 2;
}

message VerifyWebCredentialsRequest {
	optional bytes web_credentials = 1;
}
